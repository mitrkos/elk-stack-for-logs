input {
	file {
		start_position => "beginning"
    	path => "/usr/share/logstash/input/*.log"
	}
}

filter {
    # Base structures parsing
    grok {
        match => { 
            "message" => [
                "%{GREEDYDATA:timestamp} \[%{ONE_TAG:zone_id}\]+\[%{ONE_TAG:module}\]+\[%{ONE_TAG:log_lvl}\]+: %{GREEDYDATA:text}",
                "%{GREEDYDATA:timestamp} \[VM %{ONE_TAG:vm_id}\]+\[%{ONE_TAG:zone_id}\]+\[%{ONE_TAG:module}\]+\[%{ONE_TAG:log_lvl}\]+: %{GREEDYDATA:text}",
                "%{GREEDYDATA:timestamp} \[%{ONE_TAG:module}\]+ %{GREEDYDATA:text}"
            ] 
        }
        pattern_definitions => {
            "ONE_TAG" => ".[^\[\]]*?"
        }

		add_tag => ["preprocessed"]
    }

    # Date parsing
    date {
        match => ["timestamp", "EEE MMM dd HH:mm:ss yyyy", "EEE MMM  dd HH:mm:ss yyyy", "dd/MM/yyyy HH:mm:ss"]
    }
	# Set epoch if couldn't parse log date
	if "_dateparsefailure" in [tags] {
		mutate {
			update => { "timestamp" => "01/01/1997 00:00:00" }
		}
		date {
        	match => ["timestamp", "dd/MM/yyyy HH:mm:ss"]
    	}
	}

    # Make log_level pretty again
    translate {
        field => "[log_lvl]"
        destination => "[log_level]"
        dictionary => {
            "D" => "DEBUG"
            "I" => "INFO"
            "W" => "WARNING"
            "E" => "ERROR"
        }
        fallback => "UNKNOWN"
    }

    mutate {
        remove_field => ["timestamp", "log_lvl"]
    }

    # Special parsing by modules
    if [module] == "ONE" {
        # Process only 1 event by requirements (one finalized)
        grok {
            match => {
                "text" => "All modules finalized, exiting."
            }

			add_field => ["ru_text", "Все подсистемы завершили работу."]
            add_tag => ["processed"]
        }

    } else if [module] == "VM" {
        # Process only 1 event by requirements (vm state changed)
        grok {
            match => {
                "text" => "New LCM state is %{WORD:lcm_state}"
            }

			add_field => ["ru_text", "Новое состояние СУЖЦ (LCM) %{lcm_state}"]
            add_tag => ["processed"]
        }

    } else if [module] == "AUTH" {
        # Process all events 
        grok {
            match => {
                "text" => [
                    "Login: User: %{USERNAME:user_name} GROUP:%{USERNAME:group_name}",
                    "Unauthorized login attempt"
                ]
            }

            add_tag => ["processed"]
        }

		if [user_name] {
			mutate {
				add_field => ["ru_text", "Вход пользователя: %{user_name} группа: %{group_name}"]
			}
		} else {
            mutate {
			    add_field => ["ru_text", "Попытка входа без авторизации"]
            }
		}

        mutate {
            add_field => ["log_level", "AUTH"]
        }

    } else if [module] == "ReM" {
        # Process all events 
        grok {
            match => {
                "text" => [
                    "Req:%{INT:req_link} UID:%{DATA:user_id} USER:%{OPT_USERNAME:user_name} METHOD:%{HOSTNAME:method} invoked%{GREEDYDATA:params}",
                    "Req:%{INT:req_link} UID:%{DATA:user_id} %{HOSTNAME:method} result %{WORD:response_status}, %{GREEDYDATA:response}",
                    "Req:%{INT:req_link} UID:%{DATA:user_id} %{HOSTNAME:method} result %{WORD:response_status} %{GREEDYDATA:error_message}"
                ]
            }
            pattern_definitions => {
                "OPT_USERNAME" => "(|%{USERNAME})"
            }

            add_tag => ["processed"]
        }

        if "processed" in [tags] {
            mutate {
                gsub => [
                    "params", " , ", ""
                ]
            }

			translate {
					field => "method"
					destination => "ru_method"
					dictionary_path => '/usr/share/logstash/translations/translations.yaml'
					fallback => "%{method}"
			}

			if [method] == "one.vm.action" {
				grok {
					match => {
						"params" => '"%{DATA:vm_action}", %{INT:vm_id}'
					}
				}

				translate {
					field => "vm_action"
					destination => "ru_vm_action"
					dictionary_path => '/usr/share/logstash/translations/translations.yaml'
					fallback => "%{vm_action}"
				}
        	}
        }

		if ![response_status] {
            mutate {
                add_tag => ["ReM_request"]
            }

			if [method] == "one.vm.action" {
				mutate {
            		add_field => ["ru_text", 'Запрос: %{req_link}. Пользователь: %{user_name} (ид: %{user_id}) сделал запрос на: "%{ru_method}" с дествием: "%{ru_vm_action}" на ВМ c ид: %{vm_id}']
        		}
			} else {
				mutate {
            		add_field => ["ru_text", 'Запрос: %{req_link}. Пользователь: %{user_name} (ид: %{user_id}) сделал запрос на: "%{ru_method}" с параметрами: %{params}']
        		}
			}
		} else {
            mutate {
                add_tag => ["ReM_response"]
            }

			if [response_status] == "SUCCESS" {
				mutate {
            		add_field => ["ru_text", 'Запрос: %{req_link} пользователя c ид: %{user_id} на: "%{ru_method}" выполнился успешно. Ответ: %{response}']
        		}
			} else {
				mutate {
            		add_field => ["ru_text", 'Запрос: %{req_link} пользователя c ид: %{user_id} на: "%{ru_method}" завершился с ошибкой. Ошибка: %{error_message}']
        		}
			}
		}
    }
}

output {
	if "processed" in [tags] {
		# Main working index
        elasticsearch {
			hosts => "elasticsearch:9200"
			user => "elastic"
			password => "changeme"
			index => "logs-%{+YYYY.MM}-processed"
		}
    } else if "preprocessed" in [tags] {
		# Index with all logs, may be helpful
		elasticsearch {
			hosts => "elasticsearch:9200"
			user => "elastic"
			password => "changeme"
			index => "logs-%{+YYYY.MM}-other"
		}
	}
}
